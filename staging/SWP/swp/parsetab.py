
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xc9\x0c1:gw\x9b\x13Z\x9e\x90\xf3\x1d\xda\x8b\x99'
    
_lr_action_items = {'BRA3':([1,4,5,6,7,8,9,10,11,12,13,15,16,18,21,25,26,28,29,30,31,33,34,35,36,38,39,40,41,43,50,52,53,54,],[4,4,4,-22,-6,-18,-20,4,-21,-23,4,-3,-24,4,-30,4,-19,4,4,4,4,-25,-26,4,-29,-2,4,-7,-31,-27,-28,-32,-33,-8,]),'BRA2':([1,4,5,6,7,8,9,10,11,12,13,15,16,18,21,26,28,29,30,31,33,34,35,36,38,39,40,41,43,50,52,53,54,],[5,5,5,-22,-6,-18,-20,5,-21,-23,28,-3,-24,5,-30,-19,5,5,5,28,-25,-26,5,-29,-2,5,-7,-31,-27,-28,-32,-33,-8,]),'INFIXOPERATOR':([6,8,9,11,12,13,15,16,21,26,33,34,36,38,41,43,50,52,53,],[-22,-18,-20,-21,-23,29,-3,-24,-30,-19,-25,-26,-29,-2,-31,-27,-28,-32,-33,]),'STRING':([1,4,5,6,7,8,9,10,11,12,13,15,16,18,21,25,26,28,29,30,31,33,34,35,36,38,39,40,41,43,50,52,53,54,],[12,12,12,-22,-6,-18,-20,12,-21,-23,12,-3,-24,12,-30,12,-19,12,12,12,12,-25,-26,12,-29,-2,12,-7,-31,-27,-28,-32,-33,-8,]),'ASSIGNMENT':([6,8,9,11,12,13,14,15,16,17,20,21,23,26,31,32,33,34,36,38,41,42,43,45,47,49,50,52,53,],[-22,-18,-20,-21,-23,-17,-15,-3,-24,-12,39,-30,-11,-19,-17,-16,-25,-26,-29,-2,-31,-10,-27,-13,-14,-9,-28,-32,-33,]),'KET3':([4,6,8,9,11,12,13,14,15,16,17,21,22,23,26,31,32,33,34,36,38,41,42,43,45,47,49,50,52,53,],[21,-22,-18,-20,-21,-23,-17,-15,-3,-24,-12,-30,41,-11,-19,-17,-16,-25,-26,-29,-2,-31,-10,-27,-13,-14,-9,-28,-32,-33,]),'KET':([6,8,9,11,12,13,14,15,16,17,18,21,23,26,31,32,33,34,36,37,38,41,42,43,45,47,49,50,52,53,],[-22,-18,-20,-21,-23,-17,-15,-3,-24,-12,36,-30,-11,-19,-17,-16,-25,-26,-29,50,-2,-31,-10,-27,-13,-14,-9,-28,-32,-33,]),'NUMBER':([1,4,5,6,7,8,9,10,11,12,13,15,16,18,21,25,26,28,29,30,31,33,34,35,36,38,39,40,41,43,50,52,53,54,],[6,6,6,-22,-6,-18,-20,6,-21,-23,6,-3,-24,6,-30,6,-19,6,6,6,6,-25,-26,6,-29,-2,6,-7,-31,-27,-28,-32,-33,-8,]),'EOL':([1,6,7,8,9,10,11,12,13,14,15,16,17,20,21,23,26,30,31,32,33,34,36,38,40,41,42,43,45,47,48,49,50,51,52,53,54,],[7,-22,-6,-18,-20,7,-21,-23,-17,-15,-3,-24,-12,40,-30,-11,-19,46,-17,-16,-25,-26,-29,-2,-7,-31,-10,-27,-13,-14,46,-9,-28,54,-32,-33,-8,]),'DOT':([6,8,9,11,12,15,16,21,33,34,36,38,41,50,52,53,],[-22,25,-20,-21,-23,-3,-24,-30,-25,-26,-29,-2,-31,-28,-32,-33,]),'COLON':([6,8,9,11,12,13,15,16,21,26,31,33,34,36,38,41,43,50,52,53,],[-22,-18,-20,-21,-23,30,-3,-24,-30,-19,48,-25,-26,-29,-2,-31,-27,-28,-32,-33,]),'KET2':([5,6,8,9,11,12,13,14,15,16,17,21,23,24,26,31,32,33,34,36,38,41,42,43,44,45,47,49,50,52,53,],[23,-22,-18,-20,-21,-23,-17,-15,-3,-24,-12,-30,-11,42,-19,-17,-16,-25,-26,-29,-2,-31,-10,-27,52,-13,-14,-9,-28,-32,-33,]),'COMMA':([6,8,9,11,12,13,14,15,16,17,21,23,26,31,32,33,34,36,38,41,42,43,45,47,49,50,52,53,],[-22,-18,-20,-21,-23,-17,-15,-3,-24,35,-30,-11,-19,-17,-16,-25,-26,-29,-2,-31,-10,-27,-13,-14,-9,-28,-32,-33,]),'BLOCKEND':([1,7,10,19,27,40,54,],[15,-6,-5,38,-4,-7,-8,]),'BLOCKSTART':([0,46,],[1,1,]),'ID':([1,4,5,6,7,8,9,10,11,12,13,15,16,18,21,25,26,28,29,30,31,33,34,35,36,38,39,40,41,43,50,52,53,54,],[16,16,16,-22,-6,-18,-20,16,-21,-23,16,-3,-24,16,-30,16,-19,16,16,16,16,-25,-26,16,-29,-2,16,-7,-31,-27,-28,-32,-33,-8,]),'BRA':([1,4,5,6,7,8,9,10,11,12,13,15,16,18,21,25,26,28,29,30,31,33,34,35,36,38,39,40,41,43,50,52,53,54,],[18,18,18,-22,-6,-18,-20,18,-21,-23,18,-3,-24,18,-30,18,-19,18,18,18,18,-25,-26,18,-29,-2,18,-7,-31,-27,-28,-32,-33,-8,]),'$end':([2,3,15,38,],[0,-1,-3,-2,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'bracketedexpression':([1,4,5,10,13,18,25,28,29,30,31,35,39,],[9,9,9,9,9,9,9,9,9,9,9,9,9,]),'trailertoo':([13,31,43,],[34,34,34,]),'oldexpression':([1,4,5,10,18,28,29,30,35,39,],[17,17,17,17,17,17,17,17,17,17,]),'factor':([1,4,5,10,13,18,25,28,29,30,31,35,39,],[13,13,13,13,31,13,43,13,13,13,31,13,13,]),'program':([0,],[2,]),'trailer':([13,31,43,],[33,33,33,]),'dotexpression':([8,],[26,]),'statement':([1,10,],[10,10,]),'constructorexpression':([1,4,5,10,13,18,25,28,29,30,31,35,39,],[11,11,11,11,11,11,11,11,11,11,11,11,11,]),'statement_list':([1,10,],[19,27,]),'factorlist':([1,4,5,10,13,18,28,29,30,31,35,39,],[14,14,14,14,32,14,14,14,14,32,14,14,]),'expression':([1,4,5,10,18,28,29,30,35,39,],[20,22,24,20,37,44,45,47,49,51,]),'factoid':([1,4,5,10,13,18,25,28,29,30,31,35,39,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'block':([0,46,],[3,53,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','./Parser.py',30),
  ('block -> BLOCKSTART statement_list BLOCKEND','block',3,'p_block_1','./Parser.py',34),
  ('block -> BLOCKSTART BLOCKEND','block',2,'p_block_2','./Parser.py',38),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list_1','./Parser.py',42),
  ('statement_list -> statement','statement_list',1,'p_statement_list_2','./Parser.py',46),
  ('statement -> EOL','statement',1,'p_statement_1','./Parser.py',50),
  ('statement -> expression EOL','statement',2,'p_statement_2','./Parser.py',54),
  ('statement -> expression ASSIGNMENT expression EOL','statement',4,'p_statement_3','./Parser.py',58),
  ('expression -> oldexpression COMMA expression','expression',3,'p_expression_2','./Parser.py',62),
  ('expression -> BRA2 expression KET2','expression',3,'p_expression_2list_1','./Parser.py',66),
  ('expression -> BRA2 KET2','expression',2,'p_expression_2list_2','./Parser.py',70),
  ('expression -> oldexpression','expression',1,'p_expression_2a','./Parser.py',74),
  ('oldexpression -> factor INFIXOPERATOR expression','oldexpression',3,'p_expression_2b','./Parser.py',78),
  ('oldexpression -> factor COLON expression','oldexpression',3,'p_expression_2c','./Parser.py',82),
  ('oldexpression -> factorlist','oldexpression',1,'p_expression_1a','./Parser.py',86),
  ('factorlist -> factor factorlist','factorlist',2,'p_factorlist_1b','./Parser.py',90),
  ('factorlist -> factor','factorlist',1,'p_factorlist_1a','./Parser.py',94),
  ('factor -> factoid','factor',1,'p_factoid','./Parser.py',98),
  ('factor -> factoid dotexpression','factor',2,'p_factor_3a','./Parser.py',102),
  ('factoid -> bracketedexpression','factoid',1,'p_expression_1b','./Parser.py',106),
  ('factoid -> constructorexpression','factoid',1,'p_expression_1c','./Parser.py',110),
  ('factoid -> NUMBER','factoid',1,'p_factor_1','./Parser.py',114),
  ('factoid -> STRING','factoid',1,'p_factor_2','./Parser.py',118),
  ('factoid -> ID','factoid',1,'p_factor_3','./Parser.py',122),
  ('factoid -> factor trailer','factoid',2,'p_factor_7','./Parser.py',126),
  ('factoid -> factor trailertoo','factoid',2,'p_factor_8','./Parser.py',130),
  ('dotexpression -> DOT factor','dotexpression',2,'p_dotexpression_2','./Parser.py',134),
  ('bracketedexpression -> BRA expression KET','bracketedexpression',3,'p_bracketedexpression_1','./Parser.py',138),
  ('bracketedexpression -> BRA KET','bracketedexpression',2,'p_bracketedexpression_2','./Parser.py',142),
  ('constructorexpression -> BRA3 KET3','constructorexpression',2,'p_constructorexpression_1','./Parser.py',146),
  ('constructorexpression -> BRA3 expression KET3','constructorexpression',3,'p_constructorexpression_2','./Parser.py',150),
  ('trailer -> BRA2 expression KET2','trailer',3,'p_trailer_1','./Parser.py',154),
  ('trailertoo -> COLON EOL block','trailertoo',3,'p_trailer_2','./Parser.py',158),
]
